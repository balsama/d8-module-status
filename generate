#!/usr/bin/env php
<?php

require_once './vendor/autoload.php';

use Balsama\DrupalOrgProject\Stats;
use PHPHtmlParser\Dom;

class rowData {
    private $d7_percentage;
    private $d8_percentage;
    private $note;
    private $status;
    private $d7_rank;
    private $human_readable_name;
    private $project;

    private function fetchProjectExtra() {
        $extra = yaml_parse_file('extra.yml');
        $project = $this->project->getMachineName();
        if (in_array($project, $extra['core'])) {
            $this->setD8Percentage('in core');
            $this->setStatus('in core');
        }
        if (isset($extra['notes'][$project])) {
            $this->setNote($extra['notes'][$project]);
            if ($this->getStatus() != 'in core') {
                $this->setStatus('Deprecated/replaced/other');
            }
        }
    }

    public function __construct(Stats $project, $total_d7, $total_d8, $rank) {
        $d7_percentage = round((float)($project->getCurrentD7Usage() / $total_d7) * 100) . '%';
        $this->setD7Percentage($d7_percentage);

        $d8_percentage = round((float)($project->getCurrentD8Usage() / $total_d8) * 100) . '%';
        $this->setD8Percentage($d8_percentage);

        $this->setNote('');

        $status = $project->getD8Stability();
        $this->setStatus($status);

        $this->d7_rank = $rank;

        $human_readable_name = $project->getHumanReadableName();
        $this->setHumanReadableName($human_readable_name);

        $this->project = $project;

        $this->fetchProjectExtra();
    }

    private function setD7Percentage($d7_percentage) {
        $this->d7_percentage = $d7_percentage;
    }
    private function setD8Percentage($d8_percentage) {
        $this->d8_percentage = $d8_percentage;
    }
    private function setNote($note = '') {
        $this->note = $note;
    }
    private function setStatus($status) {
        $this->status = $status;
    }
    private function setHumanReadableName($human_readable_name) {
        $this->human_readable_name = $human_readable_name;
    }

    public function getD7Percentage() {
        return $this->d7_percentage;
    }
    public function getD8Percentage() {
        return $this->d8_percentage;
    }
    public function getNote() {
        return $this->note;
    }
    public function getStatus() {
        return $this->status;
    }
    public function getHumanReadableName() {
        return '[' . $this->human_readable_name . '](https://drupal.org/project/' . $this->project->getMachineName() . ')';
    }
    public function getD7Rank() {
        return $this->d7_rank;
    }
    public function getAll() {
        return [
            'rank' => $this->getD7Rank(),
            'module' => $this->getHumanReadableName(),
            'd8_status' => $this->getStatus(),
            'd7_usage' => $this->getD7Percentage(),
            'd8_usage' => $this->getD8Percentage(),
            'note' => $this->getNote(),
        ];
    }
}

class topProjectList {
    private $projects;

    private function setProjects($projects) {
        $this->projects = $projects;
    }

    private function fetchProjects($length) {
        $pages = round($length / 25);
        $modules = [];
        for ($i = 0; $i < $pages; $i++) {
            $modules_dom = new Dom;
            $modules_dom->loadFromUrl('https://www.drupal.org/project/project_module?page=' . $i . '&f[0]=&f[1]=&f[2]=&f[3]=drupal_core%3A103&f[4]=sm_field_project_type%3A%5B%2A%20TO%20%2A%5D&text=&solrsort=iss_project_release_usage%20desc&op=Search');
            for ($i2 = 0; $i2 < 25; $i2++) {
                $href = $modules_dom->find('.node-project-module h2 a', $i2)->getAttribute('href');
                $href_parts = explode('/', $href);
                $machine_name = end($href_parts);
                $modules[] = $machine_name;
            }
        }
        return $modules;
    }

    public function getProjects() {
        return $this->projects;
    }

    public function __construct($length) {
        $projects = $this->fetchProjects($length);
        $this->setProjects($projects);
    }
}

class stabilityTotals {
    private $stability_totals;

    public function __construct() {
        $this->stability_totals =[];
    }

    public function incrementStabilityTotals($stability) {
        $this->stability_totals[$stability] = (isset($this->stability_totals[$stability]) ? $this->stability_totals[$stability]:0);
        $this->stability_totals[$stability]++;
    }

    public function getStabilityTotals() {
        return $this->stability_totals;
    }
}

function md_table_row($row_data) {
    return '|' . implode('|', $row_data) . '|';
}

$stability_totals = new stabilityTotals();
$stability_tables = [];
$top_n = 200;
$top_projects = new topProjectList($top_n);
$modules = $top_projects->getProjects();
$core = new Stats('drupal');
$rank = 1;
$main_table_rows = [];
foreach ($modules as $module) {
    echo $rank . '. Fetching data for: ' . $module . "\n";
    $module_stats = new Stats($module);
    $row_data = new rowData($module_stats, $core->getCurrentD7Usage(), $core->getCurrentD8Usage(), $rank);
    $main_table_rows[] = md_table_row($row_data->getAll());
    $stability_totals->incrementStabilityTotals($row_data->getStatus());
    if (in_array($rank, [25, 50, 100, 200])) {
        $stability_tables[$rank] = $stability_totals->getStabilityTotals();
    }
    $rank++;
}

$summary_table_rows = [];
foreach ($stability_tables as $top_n => $totals) {
    foreach ($totals as $value => $total) {
        $summary_table_rows[$top_n][] = md_table_row([$value, $total, round(($total / $top_n) * 100) . '%']);
    }
}

array_unshift($main_table_rows, '|D7 Rank|Module|D8 Status|D7 Usage|D8 Usage|Notes|', '| ------ | ------ | ------ | ------ | ------ | ------ |');
$main_table = implode("\n", $main_table_rows);

$doc[] = '# Current D8 status of the top ' . $top_n . ' Drupal modules';
$doc[] = '';
$doc[] = '#### Last updated: ' . date('d F Y');
$doc[] = '';
$doc[] = $main_table;
$doc[] = '';

foreach ($summary_table_rows as $top_n => $top_n_rows) {
    array_unshift($top_n_rows, '|SUMMARY - Top ' . $top_n . '|||', '| ------ | ------:| ------:|');
    $doc[] = '';
    $doc[] = implode("\n", $top_n_rows);
    $doc[] = '';
}

file_put_contents('README.md', implode("\n", $doc));